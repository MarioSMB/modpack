#pragma once

// Full list of all stat constants, included in a single location for easy reference
// 255 is the current limit (MAX_CL_STATS - 1), engine will need to be modified if you wish to add more stats

const int MAX_CL_STATS = 256;

// const int STAT_HEALTH = 0;
// const int STAT_ARMOR = 4;
// const int STAT_SHELLS = 6;
// const int STAT_NAILS = 7;
// const int STAT_ROCKETS = 8;
// const int STAT_CELLS = 9;
// const int STAT_ACTIVEWEAPON = 10;
// const int STAT_ITEMS = 15; // .items | .items2 << 23 | serverflags << 28
// const int STAT_VIEWHEIGHT = 16;

#if defined(CSQC)
    #define g_stat_HEALTH getstati(STAT_HEALTH)
    #define g_stat_ARMOR getstati(STAT_ARMOR)
    #define g_stat_SHELLS getstati(STAT_SHELLS)
    #define g_stat_NAILS getstati(STAT_NAILS)
    #define g_stat_ROCKETS getstati(STAT_ROCKETS)
    #define g_stat_CELLS getstati(STAT_CELLS)
    #define g_stat_ACTIVEWEAPON getstati(STAT_ACTIVEWEAPON)
    #define g_stat_ITEMS getstat_INT(STAT_ITEMS)
    #define g_stat_VIEWHEIGHT getstati(STAT_VIEWHEIGHT)
#elif defined(SVQC)
    #define stat_HEALTH health
    #define stat_ARMOR armorvalue
    #define stat_SHELLS ammo_shells
    #define stat_NAILS ammo_nails
    #define stat_ROCKETS ammo_rockets
    #define stat_CELLS ammo_cells
    #define stat_ACTIVEWEAPON weapon
    #define stat_ITEMS items
    #define stat_VIEWHEIGHT view_ofs_z
#endif

REGISTER_STAT(WEAPONS, VECTORI)

REGISTER_STAT(PL_VIEW_OFS, VECTOR)
REGISTER_STAT(PL_CROUCH_VIEW_OFS, VECTOR)

REGISTER_STAT(PL_MIN, VECTOR)
REGISTER_STAT(PL_CROUCH_MIN, VECTOR)

REGISTER_STAT(PL_MAX, VECTOR)
REGISTER_STAT(PL_CROUCH_MAX, VECTOR)

#ifdef SVQC
int monsters_killed, monsters_total;
#endif
REGISTER_STAT(MONSTERS_TOTAL, INT, monsters_total)
REGISTER_STAT(MONSTERS_KILLED, INT, monsters_killed)

#ifdef SVQC
int secrets_found, secrets_total;
#endif
REGISTER_STAT(SECRETS_TOTAL, INT, secrets_total)
REGISTER_STAT(SECRETS_FOUND, INT, secrets_found)

#ifdef SVQC
#include <common/physics/movetypes/movetypes.qh>

bool autocvar_sv_gameplayfix_gravityunaffectedbyticrate = true;
bool autocvar_sv_gameplayfix_upwardvelocityclearsongroundflag = true;
float autocvar_sv_gravity;
float autocvar_sv_stepheight;

float autocvar_timelimit;
float autocvar_sys_ticrate;
float autocvar_slowmo;
#endif

noref bool autocvar_sv_gameplayfix_nogravityonground;
noref bool autocvar_sv_gameplayfix_q2airaccelerate;
REGISTER_STAT(MOVEFLAGS, INT, MOVEFLAG_VALID
                              | (autocvar_sv_gameplayfix_q2airaccelerate ? MOVEFLAG_Q2AIRACCELERATE : 0)
                              | (autocvar_sv_gameplayfix_nogravityonground ? MOVEFLAG_NOGRAVITYONGROUND : 0)
                              | (autocvar_sv_gameplayfix_gravityunaffectedbyticrate ? MOVEFLAG_GRAVITYUNAFFECTEDBYTICRATE : 0))

REGISTER_STAT(TIMELIMIT, FLOAT, autocvar_timelimit)

REGISTER_STAT(MOVEVARS_TICRATE, FLOAT, autocvar_sys_ticrate)
REGISTER_STAT(MOVEVARS_TIMESCALE, FLOAT, autocvar_slowmo)

#ifdef SVQC
int autocvar_sv_gameplayfix_downtracesupportsongroundflag = 1;
int autocvar_sv_gameplayfix_easierwaterjump = 1;
int autocvar_sv_gameplayfix_stepdown = 2;
float autocvar_sv_gameplayfix_stepdown_maxspeed = 0;
int autocvar_sv_gameplayfix_stepmultipletimes = 1;
int autocvar_sv_gameplayfix_unstickplayers = 1;
int autocvar_sv_gameplayfix_fixedcheckwatertransition = 1;
int autocvar_sv_gameplayfix_slidemoveprojectiles = 1;
int autocvar_sv_gameplayfix_grenadebouncedownslopes = 1;
int autocvar_sv_gameplayfix_noairborncorpse = 1;
int autocvar_sv_gameplayfix_noairborncorpse_allowsuspendeditems = 1;
int autocvar_sv_gameplayfix_delayprojectiles = 0;
#endif
REGISTER_STAT(GAMEPLAYFIX_DOWNTRACEONGROUND, INT, autocvar_sv_gameplayfix_downtracesupportsongroundflag)
REGISTER_STAT(GAMEPLAYFIX_EASIERWATERJUMP, INT, autocvar_sv_gameplayfix_easierwaterjump)
REGISTER_STAT(GAMEPLAYFIX_STEPDOWN, INT, autocvar_sv_gameplayfix_stepdown)
REGISTER_STAT(GAMEPLAYFIX_STEPDOWN_MAXSPEED, FLOAT, autocvar_sv_gameplayfix_stepdown_maxspeed)
REGISTER_STAT(GAMEPLAYFIX_STEPMULTIPLETIMES, INT, autocvar_sv_gameplayfix_stepmultipletimes)
REGISTER_STAT(GAMEPLAYFIX_UNSTICKPLAYERS, INT, autocvar_sv_gameplayfix_unstickplayers)
REGISTER_STAT(GAMEPLAYFIX_UPVELOCITYCLEARSONGROUND, INT, autocvar_sv_gameplayfix_upwardvelocityclearsongroundflag)
REGISTER_STAT(GAMEPLAYFIX_WATERTRANSITION, INT, autocvar_sv_gameplayfix_fixedcheckwatertransition)
REGISTER_STAT(GAMEPLAYFIX_SLIDEMOVEPROJECTILES, INT, autocvar_sv_gameplayfix_slidemoveprojectiles)
REGISTER_STAT(GAMEPLAYFIX_GRENADEBOUNCESLOPES, INT, autocvar_sv_gameplayfix_grenadebouncedownslopes)
REGISTER_STAT(GAMEPLAYFIX_NOAIRBORNCORPSE, INT, autocvar_sv_gameplayfix_noairborncorpse)
REGISTER_STAT(NOAIRBORNCORPSE_ALLOWSUSPENDED, INT, autocvar_sv_gameplayfix_noairborncorpse_allowsuspendeditems)
REGISTER_STAT(GAMEPLAYFIX_DELAYPROJECTILES, INT, autocvar_sv_gameplayfix_delayprojectiles)

#ifdef SVQC
int autocvar_sv_jumpstep;
int autocvar_sv_nostep;
#endif
REGISTER_STAT(MOVEVARS_JUMPSTEP, INT, autocvar_sv_jumpstep)
REGISTER_STAT(NOSTEP, INT, autocvar_sv_nostep)

REGISTER_STAT(MOVEVARS_GRAVITY, FLOAT, autocvar_sv_gravity)
.float gravity;
// FIXME: Was 0 on server, 1 on client. Still want that?
REGISTER_STAT(MOVEVARS_ENTGRAVITY, FLOAT, (this.gravity) ? this.gravity : 1)
REGISTER_STAT(MOVEVARS_STEPHEIGHT, FLOAT, autocvar_sv_stepheight)

#ifdef SVQC
float autocvar_sv_wallfriction;
#endif
REGISTER_STAT(MOVEVARS_WALLFRICTION, INT)

// unique to quake
#ifdef SVQC
bool autocvar_sv_gameplayfix_nostepmoveonsteepslopes;
float autocvar_sv_waterfriction;
float autocvar_sv_wateraccelerate;
float autocvar_edgefriction;
#endif

REGISTER_STAT(GAMEPLAYFIX_NOSTEPMOVEONSTEEPSLOPES, INT, autocvar_sv_gameplayfix_nostepmoveonsteepslopes)
REGISTER_STAT(MOVEVARS_FRICTION_WATER, FLOAT)
REGISTER_STAT(MOVEVARS_WATERACCELERATE, FLOAT)
REGISTER_STAT(MOVEVARS_FRICTION_EDGE, FLOAT)

// handled slightly differently
#ifdef SVQC
float autocvar_sv_friction;
float autocvar_sv_accelerate;
float autocvar_sv_maxspeed;
float autocvar_sv_stopspeed;
float autocvar_sv_maxairspeed;
float autocvar_sv_airaccelerate;
#endif
REGISTER_STAT(MOVEVARS_FRICTION, FLOAT)
REGISTER_STAT(MOVEVARS_ACCELERATE, FLOAT)
REGISTER_STAT(MOVEVARS_MAXSPEED, FLOAT)
REGISTER_STAT(MOVEVARS_STOPSPEED, FLOAT)
REGISTER_STAT(MOVEVARS_MAXAIRSPEED, FLOAT)
REGISTER_STAT(MOVEVARS_AIRACCELERATE, FLOAT)

#ifdef SVQC
int autocvar_sv_wallclip;
#endif
REGISTER_STAT(MOVEVARS_WALLCLIP, INT)

REGISTER_STAT(SERVERFLAGS, INT, serverflags)

#ifdef SVQC
.int powerups;
#endif
REGISTER_STAT(POWERUPS, INT, this.powerups)

#ifdef SVQC
.float exptime;
#endif
REGISTER_STAT(EXPTIME, FLOAT, this.exptime)

REGISTER_STAT(SHIELD_TIME, FLOAT)

#ifdef SVQC
float shop_opentime;
vector shop_weapons;
int shop_passives;
#endif
REGISTER_STAT(SHOP_OPEN, FLOAT, shop_opentime)
REGISTER_STAT(SHOP_WEAPONS, VECTORI, shop_weapons)
REGISTER_STAT(SHOP_PASSIVES, INT, shop_passives)

#ifdef SVQC
.int ammo_lava_nails;
.int ammo_multi_rockets;
.int ammo_plasma;
.int ammo_drills;
.float field_generator_health;
#endif
REGISTER_STAT(LAVA_NAILS, INT, this.ammo_lava_nails)
REGISTER_STAT(MULTI_ROCKETS, INT, this.ammo_multi_rockets)
REGISTER_STAT(PLASMA_AMMO, INT, this.ammo_plasma)
REGISTER_STAT(DRILLS, INT, this.ammo_drills)

REGISTER_STAT(FIELDGEN_HEALTH, FLOAT, this.field_generator_health)

#ifdef SVQC
#include "../server/horde.qh"
#endif
REGISTER_STAT(HORDE, BOOL, (horde_ent) ? true : false)
REGISTER_STAT(HORDE_WAVE, INT, (horde_ent) ? horde_ent.wave : 0)

#ifdef SVQC
#include "kickflip/skate.qh"
#endif
REGISTER_STAT(BOARD_FALLING, BOOL)
REGISTER_STAT(SKATING, BOOL)
REGISTER_STAT(TRICK, INT)
REGISTER_STAT(SKATESPEED, FLOAT, this.skatespeed)
REGISTER_STAT(PUSH_FAST_TIME, FLOAT, this.push_fast_time)
REGISTER_STAT(GRIND_START_TIME, FLOAT, this.grind_start_time)
REGISTER_STAT(GRIND_STOP_TIME, FLOAT, this.grind_stop_time)

REGISTER_STAT(MANA, FLOAT)

#ifdef SVQC
int top_score;
#endif
REGISTER_STAT(TOP_SCORE, INT, top_score)

REGISTER_STAT(DUAL_WEAPONS, VECTORI)

REGISTER_STAT(QCC_CHAMPION, INT)
REGISTER_STAT(QCC_STUNNED, FLOAT)
REGISTER_STAT(QCC_ABILITYTIME, FLOAT)
REGISTER_STAT(QCC_LASTWJ, FLOAT)
#ifdef SVQC
.bool jetpack_status;
#endif
REGISTER_STAT(QCC_JETPACK, BOOL, this.jetpack_status)
REGISTER_STAT(QCC_JETPACKFUEL, BOOL)
REGISTER_STAT(QCC_BLOODRAGE, BOOL)
REGISTER_STAT(QCC_BLOODRAGE_COUNT, INT)

#ifdef SVQC
#include "slide/slide.qh"
#endif
REGISTER_STAT(SLIDE_ON, BOOL)

#ifdef SVQC
.int worldtype;
#endif
REGISTER_STAT(WORLDTYPE, INT, world.worldtype)

REGISTER_STAT(CANNON, BOOL)

#ifdef SVQC
#include "../server/horde.qh"
#endif
REGISTER_STAT(KEYS_SILVER, INT, keys_silver)
REGISTER_STAT(KEYS_GOLD, INT, keys_gold)
REGISTER_STAT(KEYS_PLATINUM, INT, keys_platinum)

REGISTER_STAT(BREEGULL_EGGTYPE, INT)
#ifdef SVQC
.entity clockwork;
#endif
REGISTER_STAT(CLOCKWORK, BOOL, (this.clockwork) ? true : false)

REGISTER_STAT(MAGIC_TYPE, INT)

REGISTER_STAT(PASSIVES, INT)

REGISTER_STAT(WINGCHARGE, FLOAT)

#ifdef SVQC
.float transform_limited;
#endif
REGISTER_STAT(TRANSFORM_LIMITED, FLOAT, this.transform_limited)

#ifdef SVQC
.int team_no;
.bool died;
int team1_score;
int team2_score;
int autocvar_sv_quake_dodgeball_pointlimit = 6;
#endif
REGISTER_STAT(HAS_BALL, BOOL)
REGISTER_STAT(CATCHING, FLOAT)
REGISTER_STAT(DEFLECTING, FLOAT)
REGISTER_STAT(FROZEN, FLOAT)
REGISTER_STAT(SPECIAL, INT)
REGISTER_STAT(STAMINA, INT)
REGISTER_STAT(DODGEBALL_TEAM, INT, this.team_no)
REGISTER_STAT(DODGEBALL_SCORE_TEAM1, INT, team1_score)
REGISTER_STAT(DODGEBALL_SCORE_TEAM2, INT, team2_score)
REGISTER_STAT(DODGEBALL_SCORE_LIMIT, INT, autocvar_sv_quake_dodgeball_pointlimit)
REGISTER_STAT(DIED, BOOL, this.died)
