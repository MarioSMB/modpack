#pragma once

#ifdef SVQC
// defined in stats
//int autocvar_sv_quake_dodgeball_pointlimit = 6;
int autocvar_sv_quake_dodgeball_balls = 1;
int autocvar_sv_quake_dodgeball_copter_dropradius = 300;
bool autocvar_sv_quake_dodgeball_classic = false;
float autocvar_sv_quake_dodgeball_timelimit = 20;

.float team_no, numbounces, died, throw_finished;

float db_init_delay;

// defined by stats
//int team1_score, team2_score;

float ceasefire, countdown, countdown_time, last_time, game_started;

.float stamina_time;

.entity propeller;

.float oldspecial;

// swaps every time a player joins or leaves
// allows alternating team joins
int last_team;

void BeginGame();

void Catch(entity this);

void Deflect(entity this);

void dodgeball_respawn2(entity this);

void dodgeball_PutPlayerInServer(entity this);

void dodgeball_GibPlayer(entity this, entity inflictor, entity attacker);

void dodgeball_PlayerDies(entity this);

void dodgeball_ClientConnect(entity this);

void dodgeball_RemovePlayer(entity this);

void dodgeball_StartFrame();

void dodgeball_Rejoin(entity this);

void dodgeball_PlayerPreThink(entity this);

void dodgeball_PlayerPowerups(entity this);

entity SelectTeamSpawn(entity this, int tno);

entity SelectBallSpot();
#endif

bool dodgeball_Sprinting(entity this);

float dodgeball_GetMoveSpeed(entity this);

bool dodgeball_PlayerPhysics(entity this);

#ifdef CSQC
string dodgeball_viewmodel(entity this);
#endif
