#pragma once

#ifdef GAMEQC
/*
==================
findbetterlocation

Returns a point at least 12 units away from walls
(useful for explosion animations, although the blast is performed where it really happened)
Ripped from DPMod
==================
*/
vector findbetterlocation (vector org, float mindist);
#endif

string fixPriorityList(string pl, float from, float to, float subtract, float complete);
string mapPriorityList(string order, string(string) mapfunc);
string swapInPriorityList(string order, float i, float j);

// this returns a tempstring containing a copy of s with additional \n newlines added, it also replaces \n in the text with a real newline
// NOTE: s IS allowed to be a tempstring
string wordwrap(string s, float l);
#ifdef SVQC
void wordwrap_sprint(entity to, string s, float l);
#endif
void wordwrap_cb(string s, float l, void(string) callback);

USING(textLengthUpToWidth_widthFunction_t, float(string s, vector size));
USING(textLengthUpToLength_lenFunction_t, float(string s));
float textLengthUpToWidth(string theText, float maxWidth, vector size, textLengthUpToWidth_widthFunction_t tw);
string textShortenToWidth(string theText, float maxWidth, vector size, textLengthUpToWidth_widthFunction_t tw);
float textLengthUpToLength(string theText, int maxLength, textLengthUpToLength_lenFunction_t tw);
string textShortenToLength(string theText, int maxLength, textLengthUpToLength_lenFunction_t tw);

string getWrappedLine_remaining;
string getWrappedLine(float w, vector theFontSize, textLengthUpToWidth_widthFunction_t tw);
string getWrappedLineLen(float w, textLengthUpToLength_lenFunction_t tw);

string translate_key(string key);

vector decompressShortVector(float data);
float compressShortVector(vector vec);

// Some common varargs functions. Lowercase as they match C.
//#define fprintf(file, ...) fputs(file, sprintf(__VA_ARGS__))
#define bprintf(...) bprint(sprintf(__VA_ARGS__))

#ifdef GAMEQC
	#ifdef CSQC
		noref bool autocvar_cl_gentle;
		noref int autocvar_cl_gentle_messages;
		#define GENTLE (autocvar_cl_gentle || autocvar_cl_gentle_messages)
	#else
		noref int autocvar_sv_gentle;
		#define GENTLE autocvar_sv_gentle
	#endif
	#define normal_or_gentle(normal, gentle) ((GENTLE && (gentle != "")) ? gentle : normal)
#endif

float compressShotOrigin(vector v);
vector decompressShotOrigin(int f);

USING(findNextEntityNearFunction_t, entity(entity cur, entity near, entity pass));
USING(isConnectedFunction_t, float(entity a, entity b, entity pass));
void FindConnectedComponent(entity e, .entity fld, findNextEntityNearFunction_t nxt, isConnectedFunction_t iscon, entity pass);

// expand multiple arguments into one argument by stripping parenthesis
#define XPD(...) __VA_ARGS__

#define TIME_TO_NTHS(t,n) floor((t) * (n) + 0.5)

const int TIME_DECIMALS = 2;
const float TIME_FACTOR = 100;
#define TIME_ENCODED_TOSTRING(n, compact) mmssth(n, compact)
#define TIME_ENCODE(t) TIME_TO_NTHS(t, TIME_FACTOR)
#define TIME_DECODE(n) ((n) / TIME_FACTOR)

#ifdef GAMEQC
int Mod_Q1BSP_SuperContentsFromNativeContents(int nativecontents);
int Mod_Q1BSP_NativeContentsFromSuperContents(int supercontents);
#endif

#ifdef SVQC
void attach_sameorigin(entity e, entity to, string tag);
void detach_sameorigin(entity e);
void follow_sameorigin(entity e, entity to);

void SetMovetypeFollow(entity ent, entity e);
#endif

#ifdef GAMEQC
float trace_hits_box_1d(float end, float thmi, float thma);

float trace_hits_box(vector start, vector end, vector thmi, vector thma);

float tracebox_hits_box(vector start, vector mi, vector ma, vector end, vector thmi, vector thma);

float tracebox_hits_box(vector start, vector mi, vector ma, vector end, vector thmi, vector thma);
#endif

float cvar_settemp(string tmp_cvar, string tmp_value);

int cvar_settemp_restore();

IntrusiveList g_saved_cvars;
STATIC_INIT(g_saved_cvars) { g_saved_cvars = IL_NEW(); }

#ifndef SVQC
.string message;
#endif
