#include "dingus.qh"

#ifdef SVQC
METHOD(Dingus, m_activate, void(Champions this, entity actor))
{
	player_sound(actor, CH_VOICE, "start.wav", ATTN_NORM);
}

METHOD(Dingus, m_cannon_launch, void(Champions this, entity actor, entity cannon))
{
	player_sound(actor, CH_TRIGGER_SINGLE, "death2.wav", ATTN_NORM);
	actor.dingus_cannon = true;
}

METHOD(Dingus, m_cannon_land, bool(Champions this, entity actor))
{
	if(!actor.dingus_cannon)
		return false;
	stopsound(actor, CH_TRIGGER_SINGLE);
	actor.dingus_cannon = false;
	return false;
}

METHOD(Dingus, m_condition, bool(Champions this, entity actor))
{
	if(autocvar_sv_allow_customplayermodels_dingus == "")
		return true;
	return !PlayerInList(actor, autocvar_sv_allow_customplayermodels_dingus);
}

METHOD(Dingus, m_touch, void(Champions this, entity actor, entity toucher))
{
	if(time < actor.dingus_bash_delay)
		return;
	if(actor.velocity == '0 0 0')
		return;

	if(toucher.takedamage && Damage_ValidTarget(toucher, actor))
	{
		makevectors(actor.angles);
		vector vec = normalize(toucher.origin - actor.origin);
		float dot = vec * v_forward;
		if(dot < 0.3)
			return;

		if(!(toucher.monsterdef.spawnflags & MONSTER_TYPE_BOSS) && !(toucher.monsterdef.spawnflags & MON_FLAG_STATIONARY))
		{
			float pushforce = 100 / vlen(toucher.maxs - toucher.mins);

			makevectors(actor.angles);
			toucher.velocity = v_forward * (20 * pushforce);
			toucher.velocity_z = (50 * pushforce);
		}

		float thedamage = 1000;
		//if(toucher.monsterdef.spawnflags & MONSTER_TYPE_UNDEAD)
			//thedamage = 120;

		T_Damage(toucher, actor, actor, thedamage, DEATH_CRUSH.m_id);
		player_sound(actor, CH_VOICE, "oops.wav", ATTN_NORM);

		actor.dingus_bash_delay = time + 0.5;
	}
}
#endif

#ifdef CSQC
METHOD(Dingus, m_drawface, bool(Champions this, vector pos, vector icon_size))
{
	string pic = "gfx/quake/dingus_face";
	//Sbar_DrawPic('112 0 0', pic);
	drawpic(pos, pic, icon_size, '1 1 1', autocvar_sbar_alpha_fg, DRAWFLAG_NORMAL);
	return true;
}
#endif
