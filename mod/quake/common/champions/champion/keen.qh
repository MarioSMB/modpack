#pragma once

#include "../all.qh"

#ifdef GAMEQC
MODEL(Keen, "progs/player_keen.mdl");
MODEL(Keen_Head, "progs/h_player_keen.mdl");

SOUND(Keen_Pain1, "player_keen/pain0");
SOUND(Keen_Pain2, "player_keen/pain1");
SOUND(Keen_Pain3, "player_keen/pain2");
Sound SND_Keen_Pain_Random() {
    return REGISTRY_GET(Sounds, SND_Keen_Pain1.m_id + rint(random() * 2));
}

SOUND(Keen_Death1, "player_keen/death1");
SOUND(Keen_Death2, "player_keen/death2");
Sound SND_Keen_Death_Random() {
    return REGISTRY_GET(Sounds, (random() < 0.5) ? SND_Keen_Death1.m_id : SND_Keen_Death2.m_id);
}
SOUND(Keen_Crush, "player_keen/jumpatk");
SOUND(Keen_Pogo, "player_keen/pogo");
SOUND(Keen_Appear, "player_keen/start");
PRECACHE(Keen)
{
#ifdef CSQC
    precache_pic("gfx/quake/keen_face_invis");
    precache_pic("gfx/quake/keen_face_invul2");
    precache_pic("gfx/quake/keen_face_inv2");
    precache_pic("gfx/quake/keen_face_quad");

    precache_pic("gfx/quake/keen_face1");
    precache_pic("gfx/quake/keen_face_p1");
    precache_pic("gfx/quake/keen_face2");
    precache_pic("gfx/quake/keen_face_p2");
    precache_pic("gfx/quake/keen_face3");
    precache_pic("gfx/quake/keen_face_p3");
    precache_pic("gfx/quake/keen_face4");
    precache_pic("gfx/quake/keen_face_p4");
    precache_pic("gfx/quake/keen_face5");
    precache_pic("gfx/quake/keen_face_p5");
#endif
#ifdef SVQC
    precache_sound("player_keen/plyrjmp8.wav");       // player jump
    precache_sound("player_keen/land.wav");           // player landing
    precache_sound("player_keen/land2.wav");      // player hurt landing
    precache_sound("player_keen/drown1.wav");     // drowning pain
    precache_sound("player_keen/drown2.wav");     // drowning pain
    precache_sound("player_keen/gasp1.wav");      // gasping for air
    precache_sound("player_keen/gasp2.wav");      // taking breath
    precache_sound("player_keen/h2odeath.wav");       // drowning death

    precache_sound("player_keen/pain0.wav");
    precache_sound("player_keen/pain1.wav");
    precache_sound("player_keen/pain2.wav");

    precache_sound("player_keen/death1.wav");
    precache_sound("player_keen/death2.wav");

    precache_sound("player_keen/axhit1.wav");

    precache_sound("player_keen/lburn1.wav");     // lava burn
    precache_sound("player_keen/lburn2.wav");     // lava burn

    precache_model("progs/v_pogo.mdl");
#endif
}
#endif
#ifdef CSQC
#define KEEN_STATS \
"Small, fits through tight spaces\n" \
"Short hops, big jump when stationary\n" \
"Takes no fall damage\n" \
"Has a pogo stick"
#endif
CLASS(Keen, Champions)
    ATTRIB(Keen, netname, string, "keen");
    ATTRIB(Keen, m_name, string, "Keen");
    ATTRIB(Keen, qcc_falldamage, float, 0);
    ATTRIB(Keen, qcc_jumpheight, float, 0.75);
    //ATTRIB(Keen, qcc_meleename, string, "pogo");
    ATTRIB(Keen, m_viewofs, vector, '0 0 8');
    ATTRIB(Keen, m_mins, vector, '-8 -8 -24');
    ATTRIB(Keen, m_maxs, vector, '8 8 14');
#ifdef GAMEQC
    ATTRIB(Keen, m_model, Model, MDL_Keen);
    ATTRIB(Keen, m_model_head, Model, MDL_Keen_Head);
    ATTRIB(Keen, m_soundpath, string, "player_keen/");
    METHOD(Keen, m_sound_pain, string()) { return SND(Keen_Pain_Random()); }
    METHOD(Keen, m_sound_death, string()) { return SND(Keen_Death_Random()); }
    METHOD(Keen, m_sound_jump, string()) { return "player_keen/plyrjmp8.wav"; }
#endif
#ifdef CSQC
    ATTRIB(Keen, m_faceprefix, string, "gfx/quake/keen_");
#endif
#ifdef CSQC
    ATTRIB(Keen, message, string, KEEN_STATS);
#endif
ENDCLASS(Keen)
REGISTER_CHAMPION(Keen, NEW(Keen));

#ifdef GAMEQC
bool Keen_PogoActive(entity actor);
#endif
