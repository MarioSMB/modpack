#pragma once

#include "../all.qh"

#ifdef GAMEQC
EFFECT(0, V1_SLIDE,                 "TE_SPARK")

MODEL(V1, "progs/player_v1.mdl");

SOUND(V1_Pain1, "player_v1/pain1");
SOUND(V1_Pain2, "player_v1/pain2");
SOUND(V1_Pain3, "player_v1/pain3");
Sound SND_V1_Pain_Random() {
    return REGISTRY_GET(Sounds, SND_V1_Pain1.m_id + rint(random() * 2));
}

SOUND(V1_Death1, "player_v1/death1");
SOUND(V1_Death2, "player_v1/death2");
SOUND(V1_Death3, "player_v1/death3");
SOUND(V1_Death4, "player_v1/death4");
SOUND(V1_Death5, "player_v1/death5");
Sound SND_V1_Death_Random() {
    return REGISTRY_GET(Sounds, SND_V1_Death1.m_id + rint(random() * 4));
}

PRECACHE(V1)
{
#ifdef CSQC
    precache_pic("gfx/quake/v1_face_invis");
    precache_pic("gfx/quake/v1_face_invul2");
    precache_pic("gfx/quake/v1_face_inv2");
    precache_pic("gfx/quake/v1_face_quad");

    precache_pic("gfx/quake/v1_face1");
    precache_pic("gfx/quake/v1_face_p1");
    precache_pic("gfx/quake/v1_face2");
    precache_pic("gfx/quake/v1_face_p2");
    precache_pic("gfx/quake/v1_face3");
    precache_pic("gfx/quake/v1_face_p3");
    precache_pic("gfx/quake/v1_face4");
    precache_pic("gfx/quake/v1_face_p4");
    precache_pic("gfx/quake/v1_face5");
    precache_pic("gfx/quake/v1_face_p5");
#endif
#ifdef SVQC
    precache_sound("player_v1/plyrjmp8.wav");       // player jump
    precache_sound("player_v1/land.wav");           // player landing
    precache_sound("player_v1/land2.wav");      // player hurt landing
    precache_sound("player_v1/drown1.wav");     // drowning pain
    precache_sound("player_v1/drown2.wav");     // drowning pain
    precache_sound("player_v1/gasp1.wav");      // gasping for air
    precache_sound("player_v1/gasp2.wav");      // taking breath
    precache_sound("player_v1/h2odeath.wav");       // drowning death

    precache_sound("player_v1/pain1.wav");
    precache_sound("player_v1/pain2.wav");

    precache_sound("player_v1/death1.wav");
    precache_sound("player_v1/death2.wav");
    precache_sound("player_v1/death3.wav");

    precache_sound("player_v1/axhit1.wav");
    precache_sound("player_v1/axhit2.wav");

    precache_sound("player_v1/lburn1.wav");     // lava burn
    precache_sound("player_v1/lburn2.wav");     // lava burn

    precache_sound("player_v1/falling.wav");
    precache_sound("player_v1/start.wav");
    precache_sound("player_v1/start2.wav");
    precache_sound("player_v1/start3.wav");
    precache_sound("player_v1/start4.wav");

    precache_sound("player_v1/slide_start.wav");
    precache_sound("player_v1/slide_slam.wav");
    precache_sound("player_v1/slide_jump.wav");
    precache_sound("player_v1/slide_impact.wav");
#endif
}
#endif
#ifdef CSQC
#define V1_STATS \
"Press %ABILITY% to slide\n" \
"Press again midair to ground slam\n" \
"Can jump high while sliding\n" \
"Takes no fall damage\n" \
"Has a katana that slices enemies\n" \
"Cannot regenerate health normally\n" \
"Health refills by killing enemies"
#endif
CLASS(V1, Champions)
    ATTRIB(V1, netname, string, "v1");
    ATTRIB(V1, m_name, string, "V1");
    ATTRIB(V1, qcc_falldamage, float, 0);
    ATTRIB(V1, qcc_health_regen_stable, float, 0);
    ATTRIB(V1, qcc_health_nopickup, bool, true);
#ifdef GAMEQC
    ATTRIB(V1, m_model, Model, MDL_V1);
    ATTRIB(V1, m_model_head, Model, MDL_Null);
    ATTRIB(V1, m_soundpath, string, "player_v1/");
    METHOD(V1, m_sound_pain, string()) { return SND(V1_Pain_Random()); }
    METHOD(V1, m_sound_death, string()) { return SND(V1_Death_Random()); }
#endif
#ifdef CSQC
    ATTRIB(V1, m_faceprefix, string, "gfx/quake/v1_");
#endif
#ifdef CSQC
    ATTRIB(V1, message, string, V1_STATS);
#endif
ENDCLASS(V1)
REGISTER_CHAMPION(V1, NEW(V1));

#ifdef SVQC
.bool v1_cannon;

.float v1_antispam;
.float v1_bash_time;
#endif

#ifdef GAMEQC
bool V1_Sliding(entity actor);
#endif
