#pragma once

#define ANGLEMOD(a) ((a) - 360.0 * floor((a) / 360.0))

.int attack_state;
const int AS_STRAIGHT = 1;
const int AS_SLIDING = 2;
const int AS_MELEE = 3;
const int AS_MISSILE = 4;
const int AS_DODGING = 5; // hipnotic

const int MONSTER_ATTACK_FRIEND = 32;
const int SPAWNFLAG_NEARSIGHTED = 8192;
const int SPAWNFLAG_NO_CONTENTS_DAMAGE = 16384;

const float CHARMED_RADIUS = 1500;
const float MAX_CHARMER_DISTANCE = 200;
const float MIN_CHARMER_DISTANCE = 150;
const float TOOCLOSE_CHARMER_DISTANCE = 120;

const int MONSTER_IGNOREPLAYER = 131072; // alkaline (doesn't apply in MG maps)

const float MIN_ANGLE_DELTA = 10;

.float visible_distance; // weird hipnotic feature

.entity oldenemy;

.void(entity this) th_stand;
.void(entity this) th_walk;
.void(entity this) th_run;
.void(entity this) th_missile;
.void(entity this) th_melee;

.bool(entity this) checkattack;

.bool monster_attack;

.float lefty;

.float pausetime;

.entity movetarget;

.float search_time;

.float show_hostile;

.bool enemy_visible;
//.bool enemy_infront;
.int enemy_range;
.float enemy_yaw;

bool z_overlap(entity this, entity targ);

bool CanTakedamage(entity e, entity actor);

bool visible(entity this, entity targ);

bool t_checkbottom(entity this);

entity t_checkclient(entity this);

void ChooseTurn(entity this, vector dest);

void changeyaw(entity this);

bool visblocked_wide(entity this, entity targ, vector s_ofset, vector t_ofset);

bool infront(entity this, entity targ);

int range(entity this, entity targ);

void t_movetogoal(entity this, float dist);

bool t_walkmove(entity this, float yaw, float dist);

void FoundTarget(entity this);

void ai_stand(entity this);

void ai_walk(entity this, float dist);

void ai_run_melee(entity this);

void ai_run_missile(entity this);

void ai_run_slide(entity this, float dist);

void ai_run_dodge(entity this, float dist);

void ai_run(entity this, float dist);

void ai_face(entity this);

void ai_turn(entity this);

void ai_turn_in_place(entity this);

void ai_painforward(entity this, float dist);

bool FindTarget(entity this);

void ai_pain(entity this, float dist);

void ai_forward(entity this, float dist);

void HuntCharmer(entity this);

void HuntTarget(entity this);

void ai_back(entity this, float dist);
