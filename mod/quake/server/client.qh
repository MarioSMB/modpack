#pragma once

const int CMD_REQUEST_COMMAND = 1; // copied from xonotic commands system
const int CMD_REQUEST_USAGE = 2;

.string weaponorder_byimpulse;

float autocvar_sv_quake_kill_delay = 5;

bool autocvar_sv_quake_idlekick;

bool autocvar_sv_quake_globalkeys = true;

const int CLIPGROUP_PLAYER = 1;
bool autocvar_g_player_collisions;

float autocvar_sv_maxidle;
int autocvar_sv_maxidle_minplayers;

bool autocvar_sv_spectate;

.float idlekick_lasttimeleft;
.float parm_idlesince;

bool autocvar_g_playerclip_collisions;

bool autocvar_samelevel;

string autocvar_hostname;

string intermissiontext;

float intermission_cycletime = 0;

.float suicide_delay;

.bool just_joined;

.vector death_origin;

//bool autocvar_registered = true; // to prevent being locked out of gpl levels

const int COOP_ONLY = 32768; // yoder add, Jan 16 2021; Only spawn in coop. Used by items and monsters
const int COOP_SPAWN_ACTIVE = 73;

.bool spectating;

.bool muted;

string current_cdtrack;

.string map;

.int playerid;

.float air_finished;

.float invincible_finished;
.float invisible_finished;
.float super_damage_finished;
.float radsuit_finished;

.float healthrot_nextcheck; // if grabbed Mega-Health, the next time we'll rot the players health

.string killstring;

string AppendItemcodes(string s, entity player);

void LogDeath(string mode, int deathtype, entity killer, entity killed);

void Obituary_SpecialDeath(
	entity notif_target,
	float murder,
	int deathtype,
	string s1, string s2);

float w_deathtype;
float Obituary_WeaponDeath(
	entity notif_target,
	float murder,
	int deathtype,
	string s1, string s2);

void Obituary(entity attacker, entity inflictor, entity targ, int deathtype);

.float spawn_deferred;

.float field_generator_finished;
.float field_generator_health;
.float field_generator_time;
.float field_generator_sound;

.float fly_sound;

int modelindex_bolt; // aop
.int modelindex_player;

void player_sound(entity this, int chan, string sample, float atten);
string get_playermodel(entity this);
string get_playerhead(entity this);
string get_jumpsound(entity this);

.float spawnsilent; // silent but deadly
void playersound(entity this, int chan, string sample, float vol, float atten);

// prototypes
void W_WeaponFrame(entity this, .entity weaponentity);
void W_SetCurrentAmmo(entity this);
void player_pain(entity this, entity attacker, float damage, int deathtype);
void player_stand1(entity this);
void spawn_tfog(vector org);

void Regenerate_Health(entity this);

void Regenerate_Mana(entity this);

void centerprint_all(string s);

void NextLevel();

void server_reset();

void intermission_moveplayers(entity spot);

void intermission_frame();

string getcdtrack(int numb);

void SendCDTrack(entity to, int numb);

void PutPlayerInServer(entity this);

void PutObserverInServer(entity this);

float intermission_exittime;

const int NO_INTERMISSION = BIT(0);

const int FL_INSHELTER = 32768; // for marking entities as sheltered from trigger_push

IntrusiveList g_clones;
STATIC_INIT(g_clones) { g_clones = IL_NEW(); }

IntrusiveList g_spawnpoints;
STATIC_INIT(g_spawnpoints) { g_spawnpoints = IL_NEW(); }
