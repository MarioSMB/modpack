#pragma once

int autocvar_sv_aim = 2;
bool autocvar_g_friendlyfire_virtual;
float autocvar_g_friendlyfire;
bool autocvar_sv_quake_nopushing;

.float pain_finished;

.bool damagedbycontents;

.float pushltime;
.entity pusher;

float autocvar_g_maxpushtime = 8.0;

bool empathyused; // hipnotic

bool discharged; // hipnotic

.string deathtarget; // hack from ad

.float dmg_time;

.bool poisonous;

.bool is_frozen; // defines whether an entity is frozen
const float FADETIME = 5; // STATIC GLOBAL, how long after death until monsters fade out in horde mode

.float aggro_time; // when a monster is aggro'd, set this value to the time. Future aggro's check against this.
const float AGGRO_MIN = 5; // how long to wait before allowing a new Aggro
const float AGGRO_ADD = 2; // random additional wait

.float killtime; // game time at which player got their last killed
.int killspree; // player's current killing spree
const float KILLSPREE_GAP = 3; // amount of time that can lapse for a kill to no longer count as part of a spree

bool CanDamage(entity targ, entity inflictor);

bool Damage_ValidTarget(entity targ, entity attacker);

void T_Damage(entity targ, entity inflictor, entity attacker, float damage, int deathtype);

void T_RadiusDamage(entity inflictor, entity attacker, float damage, int deathtype, entity ignore);

vector qc_aim(entity this, float missilespeed);

void impale(entity this);

.void(entity this, entity attacker, float damage, int deathtype) th_pain;
.void(entity this, entity inflictor, entity attacker, int deathtype) th_die;
//.void(entity this, entity inflictor, entity attacker) th_impale;
