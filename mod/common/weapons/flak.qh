#pragma once

#ifdef GAMEQC
MODEL(FLAK_MUZZLEFLASH,           "models/flash.md3");
MODEL(FLAK_VIEW,                  W_Model("h_flak.iqm"));
MODEL(FLAK_WORLD,                 W_Model("v_flak.md3"));
MODEL(FLAK_ITEM,                  W_Model("g_flak.md3"));

MODEL(PROJECTILE_FLAK_PRIMARY,          "models/bullet.mdl");
MODEL(PROJECTILE_FLAK_SECONDARY,        "models/bullet.mdl");
MODEL(PROJECTILE_FLAK_BOMB,             "models/rocket.md3");

EFFECT(0, FLAK_BOUNCE, "flak_bounce")
EFFECT(1, FLAK_BULLET, "flak_trail")

SOUND(FLAK_CASINGS1, W_Sound("casings1"));
SOUND(FLAK_CASINGS2, W_Sound("casings2"));
SOUND(FLAK_CASINGS3, W_Sound("casings3"));
Sound SND_FLAK_CASINGS_RANDOM() {
    return REGISTRY_GET(Sounds, SND_FLAK_CASINGS1.m_id + floor(prandom() * 3));
}

SOUND(FLAK_FIRE, W_Sound("flak_fire"));
SOUND(FLAK_FIRE2, W_Sound("flak_fire2"));
SOUND(FLAK_FIRE3, W_Sound("flak_fire3"));
#endif

AUTOCVAR(g_balance_flak_primary_damage, float, 16, "");
AUTOCVAR(g_balance_flak_primary_damage_bouncefactor, float, 0.5, "");
AUTOCVAR(g_balance_flak_primary_count, float, 8, "");
AUTOCVAR(g_balance_flak_primary_refire, float, 0.5, "");
AUTOCVAR(g_balance_flak_primary_animtime, float, 0.2, "");
AUTOCVAR(g_balance_flak_primary_ammo, float, 1, "");
AUTOCVAR(g_balance_flak_primary_speed, float, 2200, "");
AUTOCVAR(g_balance_flak_primary_speed_up, float, 270, "");
AUTOCVAR(g_balance_flak_primary_spread_up, float, 6, "");
AUTOCVAR(g_balance_flak_primary_spread_side, float, 5, "");
AUTOCVAR(g_balance_flak_primary_lifetime, float, 1.2, "");
AUTOCVAR(g_balance_flak_primary_gravity, float, 1, "");
AUTOCVAR(g_balance_flak_primary_force, float, 25, "");
AUTOCVAR(g_balance_flak_primary_passthrough, float, 0.5, "");
AUTOCVAR(g_balance_flak_primary_bouncefactor, float, 0.25, "");
AUTOCVAR(g_balance_flak_secondary_damage, float, 12, "");
AUTOCVAR(g_balance_flak_secondary_damage_bouncefactor, float, 0.5, "");
AUTOCVAR(g_balance_flak_secondary_count, float, 8, "");
AUTOCVAR(g_balance_flak_secondary_refire, float, 0.7, "");
AUTOCVAR(g_balance_flak_secondary_animtime, float, 0.3, "");
AUTOCVAR(g_balance_flak_secondary_ammo, float, 1, "");
AUTOCVAR(g_balance_flak_secondary_speed, float, 900, "");
AUTOCVAR(g_balance_flak_secondary_speed_up, float, 400, "");
AUTOCVAR(g_balance_flak_secondary_spread_up, float, 9, "");
AUTOCVAR(g_balance_flak_secondary_spread_side, float, 15, "");
AUTOCVAR(g_balance_flak_secondary_lifetime, float, 2, "");
AUTOCVAR(g_balance_flak_secondary_gravity, float, 2.5, "");
AUTOCVAR(g_balance_flak_secondary_force, float, 25, "");
AUTOCVAR(g_balance_flak_secondary_passthrough, float, 0.5, "");
AUTOCVAR(g_balance_flak_secondary_bouncefactor, float, 0.25, "");
AUTOCVAR(g_balance_flak_bomb, float, 1, "");
AUTOCVAR(g_balance_flak_bomb_ammo, float, 3, "");
AUTOCVAR(g_balance_flak_bomb_count, float, 5, "");
AUTOCVAR(g_balance_flak_bomb_damage, float, 45, "");
AUTOCVAR(g_balance_flak_bomb_edgedamage, float, 5, "");
AUTOCVAR(g_balance_flak_bomb_radius, float, 140, "");
AUTOCVAR(g_balance_flak_bomb_force, float, 300, "");
AUTOCVAR(g_balance_flak_bomb_lifetime, float, 3, "");
AUTOCVAR(g_balance_flak_bomb_health, float, 50, "");
AUTOCVAR(g_balance_flak_bomb_damageforcescale, float, 4, "");
AUTOCVAR(g_balance_flak_bomb_speed, float, 1800, "");
AUTOCVAR(g_balance_flak_bomb_speed_up, float, 200, "");
AUTOCVAR(g_balance_flak_bomb_spread_up, float, 7, "");
AUTOCVAR(g_balance_flak_bomb_spread_side, float, 15, "");
AUTOCVAR(g_balance_flak_reload_ammo, float, 0, "");
AUTOCVAR(g_balance_flak_reload_time, float, 2, "");
AUTOCVAR(g_balance_flak_switchdelay_drop, float, 0.2, "");
AUTOCVAR(g_balance_flak_switchdelay_raise, float, 0.2, "");
AUTOCVAR(g_balance_flak_weaponreplace, string, "", "");
AUTOCVAR(g_balance_flak_weaponstart, float, 0, "");
AUTOCVAR(g_balance_flak_weaponstartoverride, float, -1, "");
AUTOCVAR(g_balance_flak_weaponthrowable, float, 1, "");

CLASS(Flak, Weapon)
/* prio fix  */ ATTRIB(Flak, m_replacement, string, "hagar");
/* spawnfunc */ ATTRIB(Flak, m_canonical_spawnfunc, string, "weapon_flak");
/* ammotype  */ ATTRIB(Flak, ammo_type, int, RES_SHELLS);
/* impulse   */ ATTRIB(Flak, impulse, int, 8);
/* flags     */ ATTRIB(Flak, spawnflags, int, WEP_FLAG_NORMAL | WEP_FLAG_HIDDEN | WEP_FLAG_RELOADABLE | WEP_TYPE_SPLASH | WEP_FLAG_NOTRUEAIM | WEP_FLAG_MUTATORBLOCKED | WEP_FLAG_MODWEAPON);
/* rating    */ ATTRIB(Flak, bot_pickupbasevalue, float, 6000);
/* color     */ ATTRIB(Flak, wpcolor, vector, '1 1 0');
/* modelname */ ATTRIB(Flak, mdl, string, "flak");
#ifdef GAMEQC
/* model     */ ATTRIB(Flak, m_model, Model, MDL_FLAK_ITEM);
#endif
/* crosshair */ ATTRIB(Flak, w_crosshair, string, "gfx/crosshairflak");
/* crosshair */ ATTRIB(Flak, w_crosshair_size, float, 0.8);
/* wepimg    */ ATTRIB(Flak, model2, string, "weaponflak");
/* refname   */ ATTRIB(Flak, netname, string, "flak");
/* wepname   */ ATTRIB(Flak, m_name, string, _("Flak Cannon"));

#define X(BEGIN, P, END, class, prefix) \
	BEGIN(class) \
		P(class, prefix, ammo, float, BOTH) \
		P(class, prefix, animtime, float, BOTH) \
		P(class, prefix, bouncefactor, float, BOTH) \
		P(class, prefix, count, float, BOTH) \
		P(class, prefix, damage, float, BOTH) \
		P(class, prefix, damage_bouncefactor, float, BOTH) \
		P(class, prefix, force, float, BOTH) \
		P(class, prefix, gravity, float, BOTH) \
		P(class, prefix, refire, float, BOTH) \
		P(class, prefix, speed, float, BOTH) \
		P(class, prefix, speed_up, float, BOTH) \
		P(class, prefix, spread_side, float, BOTH) \
		P(class, prefix, spread_up, float, BOTH) \
		P(class, prefix, passthrough, float, BOTH) \
		P(class, prefix, lifetime, float, BOTH) \
		P(class, prefix, bomb, float, NONE) \
		P(class, prefix, bomb_ammo, float, NONE) \
		P(class, prefix, bomb_count, float, NONE) \
		P(class, prefix, bomb_damage, float, NONE) \
		P(class, prefix, bomb_edgedamage, float, NONE) \
		P(class, prefix, bomb_damageforcescale, float, NONE) \
		P(class, prefix, bomb_force, float, NONE) \
		P(class, prefix, bomb_health, float, NONE) \
		P(class, prefix, bomb_lifetime, float, NONE) \
		P(class, prefix, bomb_radius, float, NONE) \
		P(class, prefix, bomb_speed, float, NONE) \
		P(class, prefix, bomb_speed_up, float, NONE) \
		P(class, prefix, bomb_spread_side, float, NONE) \
		P(class, prefix, bomb_spread_up, float, NONE) \
		P(class, prefix, reload_ammo, float, NONE) \
        P(class, prefix, reload_time, float, NONE) \
        P(class, prefix, switchdelay_raise, float, NONE) \
        P(class, prefix, switchdelay_drop, float, NONE) \
        P(class, prefix, weaponreplace, string, NONE) \
        P(class, prefix, weaponstart, float, NONE) \
        P(class, prefix, weaponstartoverride, float, NONE) \
        P(class, prefix, weaponthrowable, float, NONE) \
	END()
    W_MOD_PROPS(X, Flak, flak)
#undef X

ENDCLASS(Flak)
REGISTER_WEAPON(FLAK, NEW(Flak));

SPAWNFUNC_WEAPON(weapon_flak, WEP_FLAK)


const int PROJECTILE_FLAK_PRIMARY = 45;
const int PROJECTILE_FLAK_SECONDARY = 46;
const int PROJECTILE_FLAK_BOMB = 47;

MSG_INFO_NOTIF(WEAPON_FLAK_MURDER_SPLASH,      1, 3, 2, "spree_inf s1 s2 s3loc spree_end", "s2 s1",  "weaponflak",   _("^BG%s%s^K1 took ^BG%s^K1's Flak%s%s"), "")
MSG_INFO_NOTIF(WEAPON_FLAK_MURDER_SPRAY,       1, 3, 2, "spree_inf s1 s2 s3loc spree_end", "s2 s1",  "weaponflak",   _("^BG%s%s^K1 was shredded by ^BG%s^K1's Flak Cannon%s%s"), "")
MSG_INFO_NOTIF(WEAPON_FLAK_SUICIDE,            1, 2, 1, "s1 s2loc spree_lost", "s1",                 "weaponflak",   _("^BG%s^K1 was shredded by their own Flak Cannon%s%s"), "")

MSG_MULTI_NOTIF(WEAPON_FLAK_MURDER_SPLASH,      1, NULL,        INFO_WEAPON_FLAK_MURDER_SPLASH,      NULL)
MSG_MULTI_NOTIF(WEAPON_FLAK_MURDER_SPRAY,       1, NULL,        INFO_WEAPON_FLAK_MURDER_SPRAY,       NULL)
MSG_MULTI_NOTIF(WEAPON_FLAK_SUICIDE,            1, NULL,        INFO_WEAPON_FLAK_SUICIDE,            CENTER_DEATH_SELF_GENERIC)

#ifdef SVQC
AUTOCVAR_NOREF(g_random_items_weapon_flak_probability, float, 0, "");
#endif
