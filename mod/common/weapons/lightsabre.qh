#pragma once

#ifdef GAMEQC
MODEL(LIGHTSABRE_ITEM, W_Model("g_lightsabre.md3"));
MODEL(LIGHTSABRE_WORLD, W_Model("v_lightsabre.md3"));
MODEL(LIGHTSABRE_VIEW, W_Model("h_lightsabre.iqm"));
MODEL(LIGHTSABRE_ACTIVE_WORLD, W_Model("v_lightsabre_active.md3"));
MODEL(LIGHTSABRE_ACTIVE_VIEW, W_Model("h_lightsabre_active.iqm"));

SOUND(LIGHTSABRE_MELEE1, W_Sound("lightsabre_melee1"));
SOUND(LIGHTSABRE_MELEE2, W_Sound("lightsabre_melee2"));
SOUND(LIGHTSABRE_ACTIVATE, W_Sound("lightsabre_activate"));
SOUND(LIGHTSABRE_DEACTIVATE, W_Sound("lightsabre_deactivate"));
SOUND(LIGHTSABRE_HIT1, W_Sound("lightsabre_hit1"));
SOUND(LIGHTSABRE_HIT2, W_Sound("lightsabre_hit2"));
SOUND(LIGHTSABRE_HIT3, W_Sound("lightsabre_hit3"));
Sound SND_LIGHTSABRE_HIT_RANDOM() {
    return REGISTRY_GET(Sounds, SND_LIGHTSABRE_HIT1.m_id + floor(prandom() * 3));
}
#endif

AUTOCVAR(g_balance_lightsabre_primary_animtime, float, 0.8, "");
AUTOCVAR(g_balance_lightsabre_primary_damage, float, 70, "");
AUTOCVAR(g_balance_lightsabre_primary_force, float, 200, "");
AUTOCVAR(g_balance_lightsabre_primary_melee_delay, float, 0.1, "");
AUTOCVAR(g_balance_lightsabre_primary_melee_multihit, float, 1, "");
AUTOCVAR(g_balance_lightsabre_primary_melee_no_doubleslap, float, 1, "");
AUTOCVAR(g_balance_lightsabre_primary_melee_nonplayerdamage, float, 40, "");
AUTOCVAR(g_balance_lightsabre_primary_melee_deflectrockets, bool, true, "");
AUTOCVAR(g_balance_lightsabre_primary_melee_range, float, 120, "");
AUTOCVAR(g_balance_lightsabre_primary_melee_swing_side, float, 80, "");
AUTOCVAR(g_balance_lightsabre_primary_melee_swing_up, float, 60, "");
AUTOCVAR(g_balance_lightsabre_primary_melee_time, float, 0.15, "");
AUTOCVAR(g_balance_lightsabre_primary_melee_traces, float, 10, "");
AUTOCVAR(g_balance_lightsabre_primary_refire, float, 0.5, "");
AUTOCVAR(g_balance_lightsabre_secondary_damage, float, 20, "");
AUTOCVAR(g_balance_lightsabre_secondary_animtime, float, 0.35, "");
AUTOCVAR(g_balance_lightsabre_secondary_force, float, 200, "");
AUTOCVAR(g_balance_lightsabre_secondary_melee_delay, float, 0.25, "");
AUTOCVAR(g_balance_lightsabre_secondary_melee_multihit, float, 1, "");
AUTOCVAR(g_balance_lightsabre_secondary_melee_no_doubleslap, float, 1, "");
AUTOCVAR(g_balance_lightsabre_secondary_melee_deflectrockets, bool, false, "");
AUTOCVAR(g_balance_lightsabre_secondary_melee_nonplayerdamage, float, 40, "");
AUTOCVAR(g_balance_lightsabre_secondary_melee_range, float, 120, "");
AUTOCVAR(g_balance_lightsabre_secondary_melee_swing_side, float, -80, "");
AUTOCVAR(g_balance_lightsabre_secondary_melee_swing_up, float, -50, "");
AUTOCVAR(g_balance_lightsabre_secondary_melee_time, float, 0.15, "");
AUTOCVAR(g_balance_lightsabre_secondary_melee_traces, float, 10, "");
AUTOCVAR(g_balance_lightsabre_secondary_refire, float, 0.35, "");
AUTOCVAR(g_balance_lightsabre_switchdelay_drop, float, 0.15, "");
AUTOCVAR(g_balance_lightsabre_switchdelay_raise, float, 0.15, "");
AUTOCVAR(g_balance_lightsabre_weaponreplace, string, "", "");
AUTOCVAR(g_balance_lightsabre_weaponstart, float, 0, "");
AUTOCVAR(g_balance_lightsabre_weaponstartoverride, float, -1, "");
AUTOCVAR(g_balance_lightsabre_weaponthrowable, float, 0, "");

CLASS(Lightsabre, Weapon)
/* prio fix  */ ATTRIB(Lightsabre, m_replacement, string, "machinegun");
/* spawnfunc */ ATTRIB(Lightsabre, m_canonical_spawnfunc, string, "weapon_lightsabre");
/* ammotype  */ ATTRIB(Lightsabre, ammo_type, int, RES_NONE);
/* impulse   */ ATTRIB(Lightsabre, impulse, int, 1);
/* flags     */ ATTRIB(Lightsabre, spawnflags, int, WEP_FLAG_NORMAL | WEP_FLAG_HIDDEN | WEP_FLAG_RELOADABLE | WEP_FLAG_MUTATORBLOCKED | WEP_FLAG_MODWEAPON);
/* rating    */ ATTRIB(Lightsabre, bot_pickupbasevalue, float, 6000);
/* color     */ ATTRIB(Lightsabre, wpcolor, vector, '1 0.25 0.25');
/* modelname */ ATTRIB(Lightsabre, mdl, string, "lightsabre");
#ifdef GAMEQC
/* model     */ ATTRIB(Lightsabre, m_model, Model, MDL_LIGHTSABRE_ITEM);
#endif
/* crosshair */ ATTRIB(Lightsabre, w_crosshair, string, "gfx/crosshairlightsabre");
/* crosshair */ ATTRIB(Lightsabre, w_crosshair_size, float, 0.35);
/* wepimg    */ ATTRIB(Lightsabre, model2, string, "weaponlightsabre");
/* refname   */ ATTRIB(Lightsabre, netname, string, "lightsabre");
/* wepname   */ ATTRIB(Lightsabre, m_name, string, _("Lightsabre"));

#define X(BEGIN, P, END, class, prefix) \
	BEGIN(class) \
		P(class, prefix, animtime, float, BOTH) \
		P(class, prefix, refire, float, BOTH) \
		P(class, prefix, damage, float, BOTH) \
		P(class, prefix, force, float, BOTH) \
		P(class, prefix, melee_time, float, BOTH) \
		P(class, prefix, melee_no_doubleslap, float, BOTH) \
		P(class, prefix, melee_traces, float, BOTH) \
		P(class, prefix, melee_swing_up, float, BOTH) \
		P(class, prefix, melee_swing_side, float, BOTH) \
		P(class, prefix, melee_nonplayerdamage, float, BOTH) \
		P(class, prefix, melee_deflectrockets, float, BOTH) \
		P(class, prefix, melee_multihit, float, BOTH) \
		P(class, prefix, melee_delay, float, BOTH) \
		P(class, prefix, melee_range, float, BOTH) \
        P(class, prefix, switchdelay_raise, float, NONE) \
        P(class, prefix, switchdelay_drop, float, NONE) \
        P(class, prefix, weaponreplace, string, NONE) \
        P(class, prefix, weaponstart, float, NONE) \
        P(class, prefix, weaponstartoverride, float, NONE) \
        P(class, prefix, weaponthrowable, float, NONE) \
	END()
    W_MOD_PROPS(X, Lightsabre, lightsabre)
#undef X

ENDCLASS(Lightsabre)
REGISTER_WEAPON(LIGHTSABRE, NEW(Lightsabre));

SPAWNFUNC_WEAPON(weapon_lightsabre, WEP_LIGHTSABRE)


MSG_INFO_NOTIF(WEAPON_LIGHTSABRE_MURDER,   1,   3, 2, "spree_inf s1 s2 s3loc spree_end", "s2 s1",  "weaponlightsabre",   _("^BG%s%s^K1's hand was sliced off by ^BG%s^K1's Lightsabre%s%s"), "")

MSG_MULTI_NOTIF(WEAPON_LIGHTSABRE_MURDER,   1,   NULL,        INFO_WEAPON_LIGHTSABRE_MURDER,      NULL)

#ifdef SVQC
AUTOCVAR_NOREF(g_random_items_weapon_lightsabre_probability, float, 0, "");
#endif
