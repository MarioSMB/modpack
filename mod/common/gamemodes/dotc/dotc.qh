#ifdef SVQC
	AUTOCVAR_NOREF(g_dotc, bool, false, "");
#endif

#ifdef CSQC
void HUD_Mod_DotC(vector pos, vector mySize);
#endif
CLASS(DoTC, Gametype)
    INIT(DoTC)
    {
        this.gametype_init(this, _("Defense of the Core"),"dotc","g_dotc",GAMETYPE_FLAG_TEAMPLAY | GAMETYPE_FLAG_USEPOINTS,"","timelimit=20 pointlimit=1 teams=2",_("Defend your team's core while attacking the enemy core"));
    }
    METHOD(DoTC, m_generate_mapinfo, void(Gametype this, string v))
    {
        if(substring(v, 0, 5) == "dotc_")
            MapInfo_Map_supportedGametypes |= this.gametype_flags;
    }
    METHOD(DoTC, m_isTwoBaseMode, bool())
    {
        return true;
    }
#ifdef CSQC
    ATTRIB(DoTC, m_modicons, void(vector pos, vector mySize), HUD_Mod_DotC);
#endif
ENDCLASS(DoTC)
REGISTER_GAMETYPE(DOTC, NEW(DoTC));
#define g_dotc IS_GAMETYPE(DOTC)

REGISTER_SP(DOTC_DESTROYED);
REGISTER_SP(DOTC_TURRET_KILLS);
REGISTER_SP(DOTC_FACTORY_KILLS);
REGISTER_SP(DOTC_CREDITS_TAKEN);
REGISTER_SP(DOTC_DRONE_KILLS);

REGISTER_RADARICON(DOTC_CONTROLPOINT,    3);
REGISTER_RADARICON(FACTORY,         4);

REGISTER_RADARICON(Drone,           1);

REGISTER_STAT(DOTC_CORE_LEVEL_RED, INT)
REGISTER_STAT(DOTC_CORE_CREDITS_RED, INT)
REGISTER_STAT(DOTC_CORE_CREDITS_RED_MAX, INT)
REGISTER_STAT(DOTC_CORE_LEVEL_BLUE, INT)
REGISTER_STAT(DOTC_CORE_CREDITS_BLUE, INT)
REGISTER_STAT(DOTC_CORE_CREDITS_BLUE_MAX, INT)
REGISTER_STAT(DOTC_CORE_LEVEL_YELLOW, INT)
REGISTER_STAT(DOTC_CORE_CREDITS_YELLOW, INT)
REGISTER_STAT(DOTC_CORE_CREDITS_YELLOW_MAX, INT)
REGISTER_STAT(DOTC_CORE_LEVEL_PINK, INT)
REGISTER_STAT(DOTC_CORE_CREDITS_PINK, INT)
REGISTER_STAT(DOTC_CORE_CREDITS_PINK_MAX, INT)

#ifdef SVQC
//.string cvar_basename;

AUTOCVAR_NOREF(g_dotc_respawn_delay_small, float, 0, "");
AUTOCVAR_NOREF(g_dotc_respawn_delay_small_count, float, 0, "");
AUTOCVAR_NOREF(g_dotc_respawn_delay_large, float, 0, "");
AUTOCVAR_NOREF(g_dotc_respawn_delay_large_count, float, 0, "");
AUTOCVAR_NOREF(g_dotc_respawn_delay_max, float, 0, "");
AUTOCVAR_NOREF(g_dotc_respawn_waves, float, 0, "");
AUTOCVAR_NOREF(g_dotc_weapon_stay, float, 0, "");

AUTOCVAR(g_dotc_warmup, float, 5, "");
AUTOCVAR(g_dotc_point_limit, int, 1, "");
AUTOCVAR(g_dotc_factory_killscore, int, 20, "");

AUTOCVAR(g_dotc_guarddog, int, 2, "");
AUTOCVAR(g_dotc_apply_friendlyfire, bool, false, "");

AUTOCVAR(g_dotc_turrets_healthabs, float, 0, "");
AUTOCVAR(g_dotc_turrets_healthmod, float, 1.5, "");
AUTOCVAR(g_dotc_turrets_norespawn, bool, true, "");
//AUTOCVAR(g_dotc_turrets_credits, int, 50, "");

AUTOCVAR(g_dotc_core_health, float, 15000, "");
AUTOCVAR(g_dotc_nextlevel_multiplier, float, 2, "");
AUTOCVAR(g_dotc_nextlevel_resethealth, bool, true, "");

AUTOCVAR(g_dotc_waypointsprites_cores, float, 1, "");
#endif

MODEL(PROJECTILE_DOTC_DRONE_SCOUT,              "models/dotc/fx/bullet.md3");
MODEL(PROJECTILE_DOTC_DRONE_LTANK,              "models/dotc/fx/blueplasma.md3");
MODEL(PROJECTILE_DOTC_DRONE_TANK,               "models/dotc/fx/tankshell.md3");
MODEL(PROJECTILE_DOTC_DRONE_HTANK,              "models/dotc/fx/tankshell.md3");
MODEL(PROJECTILE_DOTC_DRONE_RART,               "models/rocket.md3");
MODEL(PROJECTILE_DOTC_DRONE_GART,               "models/dotc/fx/violetorb.md3");


MODEL(DOTC_DRONE_SCOUT_BODY,          "models/dotc/scoutdrone.dpm");
MODEL(DOTC_DRONE_SCOUT_TURRET,        "models/dotc/scoutdronegun.dpm");
MODEL(DOTC_DRONE_SCOUT_DEAD,          "models/dotc/scoutdronedamage.md3");

MODEL(DOTC_DRONE_LIGHT_BODY,          "models/dotc/lightdrone.dpm");
MODEL(DOTC_DRONE_LIGHT_TURRET,        "models/dotc/lightdrone_turret.dpm");
MODEL(DOTC_DRONE_LIGHT_DEAD,          "models/dotc/lightdronedamage.md3");

MODEL(DOTC_DRONE_TANK_BODY,           "models/dotc/tankdrone.dpm");
MODEL(DOTC_DRONE_TANK_TURRET,         "models/dotc/tankdroneturret.dpm");
MODEL(DOTC_DRONE_TANK_GUN,            "models/dotc/tankdronegun.dpm");
MODEL(DOTC_DRONE_TANK_DEAD,           "models/dotc/tankdronedamage.md3");

MODEL(DOTC_DRONE_RART_BODY,           "models/dotc/artdrone.dpm");
MODEL(DOTC_DRONE_RART_TURRET,         "models/dotc/artdroneturret.dpm");
MODEL(DOTC_DRONE_RART_GUN,            "models/dotc/artdronegun.dpm");
MODEL(DOTC_DRONE_RART_DEAD,           "models/dotc/artilerydronedamage.md3");

MODEL(DOTC_DRONE_GART_BODY,           "models/dotc/artdrone.dpm");
MODEL(DOTC_DRONE_GART_TURRET,         "models/dotc/artdroneturret2.dpm");
MODEL(DOTC_DRONE_GART_GUN,            "models/dotc/artdronegun2.dpm");
MODEL(DOTC_DRONE_GART_DEAD,           "models/dotc/artilerydronedamage.md3");

const int PROJECTILE_DOTC_DRONE_SCOUT = 51; // Projectile MG/Auto cannon
const int PROJECTILE_DOTC_DRONE_LTANK = 52; // Small/slow plasma bolt
const int PROJECTILE_DOTC_DRONE_TANK  = 53; // Fast Plasma bolt
const int PROJECTILE_DOTC_DRONE_HTANK = 54; // Large Plasma bolt
const int PROJECTILE_DOTC_DRONE_RART  = 55; // Polyttrail Rocket
const int PROJECTILE_DOTC_DRONE_GART  = 56; // Tracer?

const vector drone_size_small_min = '-40 -40 10';
const vector drone_size_small_max = '40 40 60';

const vector drone_size_medium_min = '-50 -50 10';
const vector drone_size_medium_max = '50 50 70';

// TODO
const vector dotc_blue_glowmod = '0.5 0.5 3';
const vector dotc_red_glowmod = '3 0.5 0.5';

SOUND(DOTC_DEFENSE_ATTACK, "dotc/defense_attack");
SOUND(DOTC_DEFENSE_LOST, "dotc/defense_lost");

SOUND(DOTC_SQUAD_LOST, "dotc/squad_lost");
SOUND(DOTC_SQUAD_FIRE, "dotc/flyby");

const int DOTC_DRONETYPE_SCOUT 	= 1;
const int DOTC_DRONETYPE_LTANK 	= 2;
const int DOTC_DRONETYPE_TANK 	= 3;
const int DOTC_DRONETYPE_HTANK 	= 4;
const int DOTC_DRONETYPE_RART 	= 5;
const int DOTC_DRONETYPE_GART 	= 6;
const int DOTC_DRONETYPE_GUARD	= 7;
const int DOTC_DRONETYPE_LAST	= 7;
.int dotc_dronetype;

#define dotc_TeamColoredName(teamnumber) ((!teamnumber) ? "^7Rogue^7" : strcat(Team_ColorCode(teamnumber), Team_ColorName(teamnumber), "^7"))

.void(entity) entremove;

void remove_ent(entity this)
{
	if(this.entremove)
		this.entremove(this);
	delete(this);
}


#ifdef SVQC

/// What to target (drones, neutrals, guardian)
.int dotc_targetflags;
/// Dont target
const int DOTC_TARGET_NOT  		= 0;
/// Target anything considerd hostile
const int DOTC_TARGET_ALL 		= BIT(0);
/// Target drones
const int DOTC_TARGET_DRONES 	= BIT(1);
/// Target turrets
const int DOTC_TARGET_TURRETS 	= BIT(2);
/// Target neutrals
const int DOTC_TARGET_NEUTRALS 	= BIT(3);
/// Target players
const int DOTC_TARGET_PLAYERS	= BIT(4);

/// Indicates what type uf unit this is
.int dotc_unittype;
/// Undefined
const int DOTC_UF_NONE 		= 0;
/// Core & Factory
const int DOTC_UF_BUILDING 	= 1;
/// Drone, part of squad
const int DOTC_UF_DRONE 	= 2;
/// Squad (invisible controler entity)
const int DOTC_UF_SQUAD 	= 3;
/// Defense turret
const int DOTC_UF_TURRET	= 4;
/// Code addon
const int DOTC_UF_ADDON		= 5;
/// Base guardian
const int DOTC_UF_GUARDIAN	= 6;

/// How to target
//.target_select_flags
const int DOTC_TSF_CLOSE  	= BIT(1);
const int DOTC_TSF_FAR		= BIT(2);
const int DOTC_TSF_MID		= BIT(3);
const int DOTC_TSF_GROUND 	= BIT(4);
const int DOTC_TSF_AIR 		= BIT(5);

/// Squad control entity for drones
.entity squad;
/// This drones offset in the squad
.vector dotc_formation_ofs;
/// Multipler for dotc_formation_ofs
const int formation_offset1 = 250;
/// Multipler for dotc_formation_ofs
const int formation_offset2 = 500;

/// Auto-formation rules for unit (NOT IMPLEMNTED)
//.float dotc_formation_flags;
/// Fort unit. typicaly heavy hitpoint units
const int DOTC_FF_FRONT = BIT(1);
/// Flanker, stypicaly small agile/fast units
const int DOTC_FF_FLANK = BIT(2);
/// Stay in back, typicaly artillerty
const int DOTC_FF_BACK = BIT(3);

/// Refire timer
.float dotc_nextfire;
/// Function pointer to drone's firenig code.
.void(entity this) drone_fire;
//.float drone_nextframe;
/// Drones frame ("think") function. @formation_loc is where the squad thinks this drone should be. @tdela is the delta time since last frame call.
.void(entity this, entity thesquad, vector formation_loc, float tdelta) drone_frame;

/// Path entity squad is currently navigating towards
.entity dotc_squadpath;

/// Top part of drone. Some drones have combines turret-gun. Attached to body
.entity drone_turret;
/// Gun partof drone, attached to drone_turret.
.entity drone_gun;

/// When drone dies, drop a  credit worth this much
.int dotc_deathcredits;
/// How fast this drone can move
.float dotc_movespeed;
/// How fast this drone can turn
.float dotc_turnspeed;
/// Length of spring used to hover this unit
.float dotc_spring_length;
/// Strength of spring use to hover this unit
.float dotc_spring_strength;

// shared properties
.int dotc_status; // status of this objective


/// General (simple) AI target validator. @targ target to validate
int dotc_ai_valid_target(entity this, entity targ);

.entity explode_fx;
.Sound explode_snd;

#endif // SVQC

/// Consider targets within this range
.float target_range;
/// Dont consider targets closer then
.float target_range_min;
/// Targets closer to this are prefered
.float target_range_optimal;
