#pragma once

CLASS(Snafu, Gametype)
    INIT(Snafu)
    {
        this.gametype_init(this, _("SNAFU"),"snafu","g_snafu",GAMETYPE_FLAG_TEAMPLAY | GAMETYPE_FLAG_USEPOINTS,"","timelimit=30 pointlimit=5",_("Situation normal..."));
    }
    METHOD(Snafu, m_generate_mapinfo, void(Gametype this, string v))
    {
        if(v == "snafu_tadpole")
            MapInfo_Map_supportedGametypes |= this.gametype_flags;
    }
ENDCLASS(Snafu)
REGISTER_GAMETYPE(SNAFU, NEW(Snafu));
#define g_snafu IS_GAMETYPE(SNAFU)

#ifdef SVQC
AUTOCVAR_NOREF(g_snafu_point_limit, int, -1, "SNAFU point limit overriding the mapinfo specified one (use 0 to play without limit, and -1 to use the mapinfo's limit)");

AUTOCVAR(g_snafu_princess_friction, float, 2, "");
AUTOCVAR(g_snafu_princess_speed_walk, float, 220, "");
AUTOCVAR(g_snafu_princess_speed_run, float, 300, "");
AUTOCVAR(g_snafu_princess_range_walk, float, 70, "");
AUTOCVAR(g_snafu_princess_range_attack, float, 80, "");
AUTOCVAR(g_snafu_princess_range_target, float, 800, "");
AUTOCVAR(g_snafu_princess_health, float, 170, "");
AUTOCVAR(g_snafu_princess_chance, float, 0.75, "");

#if 0
AUTOCVAR(g_snafu_vprincess_chance, float, 0, "");
#endif

const int princess_run = 0;
const int princess_walk = 1;
const int princess_idle = 2;
const int princess_slap1 = 3;
const int princess_slap2 = 4;
const int princess_slap3 = 5;
const int princess_slap4 = 6;
const int princess_slap5 = 7;
const int princess_pain1 = 8;
const int princess_pain2 = 9;
const int princess_falling = 10;
const int princess_die1 = 11;
const int princess_die2 = 12;
const int princess_dead1 = 13;
const int princess_dead2 = 14;
//float .frame;

AUTOCVAR_NOREF(g_snafu_respawn_delay_small, float, 0, "");
AUTOCVAR_NOREF(g_snafu_respawn_delay_small_count, float, 0, "");
AUTOCVAR_NOREF(g_snafu_respawn_delay_large, float, 0, "");
AUTOCVAR_NOREF(g_snafu_respawn_delay_large_count, float, 0, "");
AUTOCVAR_NOREF(g_snafu_respawn_delay_max, float, 0, "");
AUTOCVAR_NOREF(g_snafu_respawn_waves, float, 0, "");
AUTOCVAR_NOREF(g_snafu_weapon_stay, float, 0, "");

AUTOCVAR(g_snafu_fatty_friction, float, 2, "");
AUTOCVAR(g_snafu_fatty_speed_walk, float, 160, "");
AUTOCVAR(g_snafu_fatty_speed_run, float, 220, "");
AUTOCVAR(g_snafu_fatty_range_attack, float, 100, "");
AUTOCVAR(g_snafu_fatty_range_attack2_min, float, 70, "");
AUTOCVAR(g_snafu_fatty_range_attack2_max, float, 120, "");
AUTOCVAR(g_snafu_fatty_range_target, float, 800, "");
AUTOCVAR(g_snafu_fatty_health, float, 220, "");
AUTOCVAR(g_snafu_fatty_chance, float, 0.25, "");
//vector autocvar_g_snafu_fatty_headbox;

void snafu_damageswitch(entity this, entity attacker);
void snafu_deathalert(entity this, entity attacker);
bool snafu_zombie_domelee(entity this, float _up, float _range, float _dmg, float _force);
//.frame

.entity zombie_head; // = tur_head;
.entity zombie_projectile; // = ignoregoal;

AUTOCVAR(g_snafu_wave_first_count, int, 25, "");
AUTOCVAR(g_snafu_wave_first_rate, float, 1, "");
AUTOCVAR(g_snafu_wave_count_multi, float, 1.1, "");
AUTOCVAR(g_snafu_wave_rate_multi, float, 1, "");
AUTOCVAR(g_snafu_wave_pause, float, 5, "");

AUTOCVAR(g_snafu_warmup, float, 10, "time between waves to prepare for battle");
AUTOCVAR(g_snafu_round_timelimit, float, 0, "maximum time to win the round (0 = infinite or until match time limit expires)");

const vector TADPOLE_MIN = '-64 -64 0';
const vector TADPOLE_MAX = '64 64 128';

AUTOCVAR(g_snafu_tadpole_health, int, 200, "");

int snafu_spawnareas;
int snafu_zombie_spawned;
int snafu_zombie_alive;
int snafu_zombie_killed;
int snafu_zombie_wavemax;
float snafu_zombie_waverate;
int snafu_wavenum = 1;

const int SAF_ZOMBIE = 2;
.int snafu_ai_flags;

const int SNAFU_PRINCESS = 1;
const int SNAFU_FATONE = 2;
const int SNAFU_CUPIDO = 3;

.float snafu_ai_enemy_select_timer;
.float snafu_ai_enemy_dist;
.float snafu_ai_unstick_done;
.float snafu_ai_unstick_check;
.float snafu_ai_lastupdate;
void snafu_zombie_localtarget(entity this, float _range);

#endif
