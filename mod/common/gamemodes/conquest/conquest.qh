#pragma once

CLASS(Conquest, Gametype)
    INIT(Conquest)
    {
        this.gametype_init(this, _("Conquest"),"cq","g_conquest",GAMETYPE_FLAG_TEAMPLAY | GAMETYPE_FLAG_USEPOINTS,"","timelimit=20 pointlimit=200 teams=2",_("Capture all the spawnpoint control points to win"));
    }
    METHOD(Conquest, m_parse_mapinfo, bool(string k, string v))
    {
        if (!k) {
            cvar_set("g_conquest_teams", cvar_defstring("g_conquest_teams"));
            return true;
        }
        switch (k) {
            case "teams":
                cvar_set("g_conquest_teams", v);
                return true;
        }
        return false;
    }
    METHOD(Conquest, m_generate_mapinfo, void(Gametype this, string v))
    {
        if(v == "conquest_controlpoint")
            MapInfo_Map_supportedGametypes |= this.gametype_flags;
    }
    METHOD(Conquest, m_isTwoBaseMode, bool())
    {
        return true;
    }
    METHOD(Conquest, m_setTeams, void(string sa))
    {
        cvar_set("g_conquest_teams", sa);
    }
ENDCLASS(Conquest)
REGISTER_GAMETYPE(CONQUEST, NEW(Conquest));
#define g_conquest IS_GAMETYPE(CONQUEST)

REGISTER_SP(CONQUEST_LIBERATED);
REGISTER_SP(CONQUEST_CAPTURED);

REGISTER_NET_LINKED(ENT_CLIENT_CONQUEST_CONTROLPOINT)

//csqc networking flags
const int CQSF_SETUP 	= BIT(0);	//! Initial setup, responsible for communicating location, y-angle and model
const int CQSF_TEAM 	= BIT(1);	//! What team point belong to
const int CQSF_HEALTH 	= BIT(2);	//! Capture progress. Networked as 0--255
const int CQSF_STATE 	= BIT(3);	//! Captured or not
const int CQSF_NAME 	= BIT(4);	//! Display name (can be defined by mapper)

#ifdef SVQC
//int autocvar_g_conquest_teams;
AUTOCVAR_NOREF(g_conquest_teams, float, 0, "");
AUTOCVAR_NOREF(g_conquest_teams_override, float, 0, "");

// global timer for score evaluations
float conquest_scoretimer;

// list of control points on the map
entity cq_worldcplist;
.entity cq_worldcpnext;

// control point constants
int cq_teams;
const float CQ_CP_THINKRATE = 0.15;

const vector CQ_CP_MIN = ('-35 -35 -3');
const vector CQ_CP_MAX = ('35 35 195');

// statuses
const int CP_NEUTRAL = 1;
const int CP_CAPTURED = 2;

// control point properties
.int cq_status; // status of the control point (CP_NEUTRAL, CP_CAPTURED declared globally)

// compatibility with old maps
const int COMPAT_DOM = 1;
const int COMPAT_ONS = 2;
.int cq_compat; // for checking if a map already has conquest support

.float cq_capdistance;
.float cq_capspeed;
.int cq_originalteam; // stored spawn team for resetting
#endif
