#pragma once

// NOTE: not saved yet as i'm sure if i want this enabled by default permanently
AUTOCVAR(cl_polytrails, bool, true, "");
AUTOCVAR_SAVE(cl_polytrails_teamcolor, bool, false, "");

CLASS(PolyTrail, Object)
    ATTRIB(PolyTrail, polytrail_follow, entity, NULL);
    ATTRIB(PolyTrail, polytrail_tex, string, string_null);
    /** Lifetime per segment */
    ATTRIB(PolyTrail, polytrail_lifetime, float, 0.2);
    ATTRIB(PolyTrail, polytrail_noise, float, 0);
    ATTRIB(PolyTrail, polytrail_segmentsize, float, 10);
    ATTRIB(PolyTrail, polytrail_noisefunc, string, "chaotic");
    ATTRIB(PolyTrail, polytrail_head_alpha, float, 1);
    ATTRIB(PolyTrail, polytrail_head_color, vector, '1 0 0');
    ATTRIB(PolyTrail, polytrail_head_thickness, float, 10);
    ATTRIB(PolyTrail, polytrail_body_alpha, float, 0.5);
    ATTRIB(PolyTrail, polytrail_body_color, vector, '0 1 0');
    ATTRIB(PolyTrail, polytrail_body_thickness, float, 5);
    ATTRIB(PolyTrail, polytrail_tail_alpha, float, 0);
    ATTRIB(PolyTrail, polytrail_tail_color, vector, '0 0 1');
    ATTRIB(PolyTrail, polytrail_tail_thickness, float, 0);

    /**
     * Increase as necessary if the buffer is overflowing
     * symptom: tail of trail is wrong
     * cause: projectiles are too fast for the segment size
     */
    const int POLYTRAIL_BUFSIZE = 1 << 7;
    /** One or more positional points */
    ATTRIBARRAY(PolyTrail, polytrail_bufpos, vector, POLYTRAIL_BUFSIZE);
    /** Noise for ending position */
    ATTRIBARRAY(PolyTrail, polytrail_bufnoise, vector, POLYTRAIL_BUFSIZE);
    /** Time of input */
    ATTRIBARRAY(PolyTrail, polytrail_buftime, float, POLYTRAIL_BUFSIZE);
    /** Current read index */
    ATTRIB(PolyTrail, polytrail_bufidx, float, -1);
    /** Counts positions stored */
    ATTRIB(PolyTrail, polytrail_cnt, float, 0);

    void Trail_draw(entity this);
    void Trail_recreate(entity this);
    void PolyTrail_Spawn(entity this, entity _follow);
    ATTRIB(PolyTrail, draw, void(entity this), Trail_draw);
ENDCLASS(PolyTrail)
